#!/usr/bin/env ruby

if STDOUT.isatty
  $color = {
    normal: "",
    gray: "\e[30m",
    red: "\e[31m",
    green: "\e[32m",
    yellow: "\e[33m",
    blue: "\e[34m",
    magenta: "\e[35m",
    cyan: "\e[36m",
    white: "\e[37m",
    reset: "\e[m",
  }
else
  $color = {}
end

$color.merge!({
  current: $color[:green],
  remote: $color[:red],
  upstream: $color[:blue],
  worktree: $color[:cyan],
  local: $color[:normal],
})

def calc_max_width
  refs = []
  refs << 'refs/heads/' if ARGV.include?('-a') || !ARGV.include?('-r')
  refs << 'refs/remotes/' if ARGV.include?('-a') || ARGV.include?('-r')

  IO.popen(%w[git for-each-ref --format=%(refname)] + refs) do |io|
    io.each(chomp: true).map do |line|
      if line.start_with?('refs/heads/')
        line.length - 'refs/heads/'.length
      else
        $remote_prefix.length + line.length - 'refs/remotes/'.length
      end
    end.max
  end
end

$remote_prefix = 'remotes/'

$remote_prefix = '' if ARGV.include?('-r') and !ARGV.include?('-a')
$verbose = !!ARGV.delete('-v')

$max_width = calc_max_width

local = '%%(if)%%(HEAD)%%(then)* %s%%(else)%%(if)%%(worktreepath)%%(then)+ %s%%(else)  %s%%(end)%%(end)' %
  [ $color[:current], $color[:worktree], $color[:local] ]
remote = '  %s' % [ $color[:remote] ]

if $verbose
  local << '%%(align:%d,left)%%(refname:lstrip=2)%%(end)%s' % [ $max_width, $color[:reset] ]
  local << '%%(if)%%(upstream)%%(then)[%s%%(upstream:short)%s] %%(end)%%(contents:subject)' %
    [ $color[:upstream], $color [:reset] ]
  remote << '%%(align:%d,left)%s%%(refname:lstrip=2)%%(end)%s' \
    '%%(if)%%(symref)%%(then) -> %%(symref:short)' \
    '%%(else) %%(contents:subject)%%(end)' %
    [ $max_width, $remote_prefix, $color[:reset] ]
else
  local << '%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)' % [ $color[:reset] ]
  remote << '%s%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)' %
    [ $remote_prefix, $color[:reset] ]
end

fmt = '%%(if:notequals=refs/remotes)%%(refname:rstrip=-2)%%(then)%s%%(else)%s%%(end)' % [ local, remote ]

system(*%W[git branch --list --format=#{fmt}] + ARGV)
