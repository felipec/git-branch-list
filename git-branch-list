#!/usr/bin/env ruby

if STDOUT.isatty
  $color = {
    normal: "",
    gray: "\e[30m",
    red: "\e[31m",
    green: "\e[32m",
    yellow: "\e[33m",
    blue: "\e[34m",
    magenta: "\e[35m",
    cyan: "\e[36m",
    white: "\e[37m",
    reset: "\e[m",
  }
else
  $color = {}
end

$color.merge!({
  current: $color[:green],
  remote: $color[:red],
  upstream: $color[:blue],
  worktree: $color[:cyan],
  local: $color[:normal],
})

def calc_max_width
  refs = []
  refs << 'refs/heads/' if ARGV.include?('-a') || !ARGV.include?('-r')
  refs << 'refs/remotes/' if ARGV.include?('-a') || ARGV.include?('-r')

  IO.popen(%w[git for-each-ref --format=%(refname:lstrip=2)] + refs) do |io|
    io.each.map(&:length).max - 1
  end
end

$verbose = !!ARGV.delete('-v')
$track = !!ARGV.delete('-t')

$max_width = calc_max_width

fmt = "%(if:equals=refs/remotes)%(refname:rstrip=-2)%(then)  #{$color[:remote]}%(else)" \
  "%(if)%(HEAD)%(then)* #{$color[:current]}%(else)" \
  "%(if)%(worktreepath)%(then)+ #{$color[:worktree]}%(else)" \
  "  #{$color[:local]}%(end)%(end)%(end)"

fmt << "%(align:#{$max_width + 1},left)%(refname:lstrip=2)%(end)#{$color[:reset]}"

ss, se = $verbose ? [ '[', ']' ] : [ '', '' ]

track = $track ? '%(upstream:trackshort)' : ''
local = "%(if)%(upstream)%(then)#{ss}#{$color[:upstream]}%(upstream:short)#{$color[:reset]}" \
  "#{track}#{se} %(end)"

remote = "%(if)%(symref)%(then)#{ss}#{$color[:upstream]}%(symref:short)#{$color[:reset]}" \
  "#{se} %(end)"

fmt << "%(if:notequals=refs/remotes)%(refname:rstrip=-2)%(then)#{local}%(else)#{remote}%(end)"
fmt << '%(contents:subject)' if $verbose

system(*%W[git branch --list --sort=-committerdate --format=#{fmt}] + ARGV)
